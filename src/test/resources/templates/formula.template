<%import com.axelor.apps.tool.StringTool%>package com.axelor.apps.formula.service

<% for (klass in klassImport) {%>import  ${klass}
<%}%>
import com.axelor.apps.fluid.db.IFluid

import com.axelor.apps.base.service.GeneralService

import com.axelor.apps.tool.StringTool

import com.axelor.exception.AxelorException
import com.axelor.exception.db.IException

import java.math.RoundingMode

@groovy.transform.CompileStatic
public class $klassName implements Formula${computeParameters.length}Lvl <$computeReturnType,$computeKey,${computeParameters.collect{it}.join(',')}>{
	
	private FormulaService fs = new FormulaService()
	<% for (formulaName in formulas?.keySet()) { %>
	private $computeReturnType $formulaName(${computeParameters.collect{it+" "+StringTool.toFirstLower(it.replaceAll("<|>",""))}.join(',')}) {
		$computeReturnType res = $computeReturnDefaultValue
		try {
			${formulas.get(formulaName)}
		} catch(Exception e) {
			def msg = ""
			<%for (exceptionConditions in exceptionFormulas?.get(formulaName)) { for (exceptionCondition in exceptionConditions) {%>${exceptionCondition}<%}%>
			<%}%>throw new AxelorException(msg, e, IException.MISSING_FIELD)
		}
		return res<%if (scale){%>.setScale(${scale}, RoundingMode.HALF_EVEN)<%}%>
	}
	<%}%>
	public $computeReturnType compute($computeKey key,${computeParameters.collect{res = it+" "+StringTool.toFirstLower(it.replaceAll("<|>","")); if (it != computeParameters[0]) {return res + " = null"} else {return res}}.join(',')}){
		
		switch(key.toLowerCase()) {
			<% for (formulaName in formulas.keySet()) { %>case "${formulaName}": return ${formulaName}(${computeParameters.collect{StringTool.toFirstLower(it.replaceAll("<|>",""))}.join(',')})
			<%}%>default: return $computeReturnDefaultValue
		}
		 
	}
}