<%import com.axelor.apps.tool.StringTool%>package com.axelor.apps.formula.service

<% for (klass in klassImport) {%>import  ${klass}
<%}%>
import com.axelor.apps.fluid.db.IFluid

import com.axelor.apps.base.service.GeneralService

import com.axelor.apps.tool.StringTool

import com.axelor.exception.AxelorException
import com.axelor.exception.db.IException

import java.math.RoundingMode

@groovy.transform.CompileStatic
public class $klassName implements Condition${runnableParameters.length}Lvl <$runnableKey,${runnableParameters.collect{it}.join(',')}>{
	
	<% for (conditionName in conditions?.keySet()) { %>
	private boolean $conditionName(${runnableParameters.collect{it+" "+StringTool.toFirstLower(it.replaceAll("<|>",""))}.join(',')}) {
		try {
			if ( ${conditions.get(conditionName)} ) return true
		} catch(Exception e) {
			def msg = ""
			<%for (exceptionCondition in exceptionConditions?.get(conditionName)) { for (exception in exceptionCondition) {%>${exception}<%}%>
			<%}%>throw new AxelorException(msg, e, IException.MISSING_FIELD)
		}
		return false
	}
	<%}%>
	public boolean isRunnable($runnableKey key,${runnableParameters.collect{res = it+" "+StringTool.toFirstLower(it.replaceAll("<|>","")); if (it != runnableParameters[0]) {return res + " = null"} else {return res}}.join(',')}){
		
		switch(key.toLowerCase()) {
			<% for (conditionName in conditions.keySet()) { %>case "${conditionName}": return ${conditionName}(${runnableParameters.collect{StringTool.toFirstLower(it.replaceAll("<|>",""))}.join(',')})
			<%}%>
			default: true 
		}
		 
	}
}